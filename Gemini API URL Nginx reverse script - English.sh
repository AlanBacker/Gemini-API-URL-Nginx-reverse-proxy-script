#!/bin/bash

# --- Configuration ---
NGINX_SITES_AVAILABLE="/etc/nginx/sites-available"
NGINX_SITES_ENABLED="/etc/nginx/sites-enabled"
TARGET_API_URL="https://generativelanguage.googleapis.com/v1beta/models/"

# --- Color Definitions ---
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# --- Helper Functions ---
function print_info {
    echo -e "${GREEN}[INFO] $1${NC}"
}

function print_warning {
    echo -e "${YELLOW}[WARN] $1${NC}"
}

function print_error {
    echo -e "${RED}[ERROR] $1${NC}"
}

function check_root {
    if [[ $EUID -ne 0 ]]; then
       print_error "This script must be run as root. Please use 'sudo ./setup_gemini_proxy_en.sh'."
       exit 1
    fi
}

function check_nginx {
    if ! command -v nginx &> /dev/null; then
        print_error "Nginx could not be found. Please install Nginx first (e.g., 'sudo apt update && sudo apt install nginx' or 'sudo yum install nginx')."
        exit 1
    fi
    print_info "Nginx installation detected."
}

# --- Main Logic ---
clear
print_info "Welcome to the Nginx Reverse Proxy Setup Script for Google Gemini API"
print_warning "--------------------------------------------------"
print_warning "Important Notes:"
print_warning "1. API Key Security: It is STRONGLY recommended to have the client provide the API Key with each request (via Header or URL parameter)."
print_warning "   The configuration generated by this script does NOT include the API Key by default. You must add it in your client requests."
print_warning "   If you choose to add the key directly in the Nginx config (not recommended), ensure the config file is secured."
print_warning "2. HTTPS: Enabling HTTPS for your proxy is highly recommended to secure communications."
print_warning "--------------------------------------------------"
echo

# 1. Check prerequisites
check_root
check_nginx
echo

# 2. Get user input
read -p "Please enter your server's domain name or public IP address: " server_name
while [[ -z "$server_name" ]]; do
    print_warning "Server domain or IP address cannot be empty."
    read -p "Please enter your server's domain name or public IP address: " server_name
done

read -p "Enter the desired path prefix for accessing Gemini on this server (must start and end with /, e.g., /gemini/): " proxy_location
# Validate path format
while ! [[ "$proxy_location" =~ ^/.*\/$ ]]; do
    print_warning "Invalid path prefix format. Must start and end with / (e.g., /gemini/). "
    read -p "Please re-enter the path prefix: " proxy_location
done

config_file_name="gemini-proxy-${server_name//./_}.conf" # Generate filename based on domain/IP
config_file_path="${NGINX_SITES_AVAILABLE}/${config_file_name}"
link_path="${NGINX_SITES_ENABLED}/${config_file_name}"

read -p "Configure HTTPS (requires you to have SSL certificate files ready)? (y/n, default n): " use_https
use_https=$(echo "$use_https" | tr '[:upper:]' '[:lower:]') # to lowercase

ssl_cert_path=""
ssl_key_path=""
listen_directive="listen 80;"
ssl_config_block=""

if [[ "$use_https" == "y" ]]; then
    listen_directive="listen 443 ssl http2;"
    print_info "HTTPS configuration selected."
    while [[ -z "$ssl_cert_path" ]]; do
        read -p "Enter the full path to your SSL certificate file (e.g., /etc/letsencrypt/live/yourdomain.com/fullchain.pem): " ssl_cert_path
        if [[ -z "$ssl_cert_path" ]]; then
            print_warning "Certificate path cannot be empty."
        # Optional: Add file existence check
        # elif [[ ! -f "$ssl_cert_path" ]]; then
        #     print_warning "Certificate file not found: $ssl_cert_path"
        #     ssl_cert_path=""
        fi
    done
     while [[ -z "$ssl_key_path" ]]; do
        read -p "Enter the full path to your SSL private key file (e.g., /etc/letsencrypt/live/yourdomain.com/privkey.pem): " ssl_key_path
         if [[ -z "$ssl_key_path" ]]; then
            print_warning "Private key path cannot be empty."
        # Optional: Add file existence check
        # elif [[ ! -f "$ssl_key_path" ]]; then
        #     print_warning "Private key file not found: $ssl_key_path"
        #     ssl_key_path=""
        fi
    done

    # Build SSL configuration block
    ssl_config_block=$(cat <<EOF
        # --- SSL Configuration ---
        ssl_certificate $ssl_cert_path;
        ssl_certificate_key $ssl_key_path;

        # Recommended SSL parameters (if using Let's Encrypt, you might include their options)
        # include /etc/letsencrypt/options-ssl-nginx.conf; # Uncomment if applicable and file exists
        # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;   # Uncomment if applicable and file exists

        # Stronger cipher suites and protocols (adjust as needed)
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
EOF
)
    print_info "HTTPS configuration parameters are set."
else
    print_info "HTTP selected (not recommended for production environments)."
fi
echo

# 3. Generate Nginx configuration content
print_info "Generating Nginx configuration file..."

# Use heredoc to create configuration content
nginx_config=$(cat <<EOF
server {
    $listen_directive
    server_name $server_name;

$ssl_config_block

    # Optional: Increase max body size if needed for large prompts/data
    # client_max_body_size 10M;

    # --- Gemini API Reverse Proxy Configuration ---
    location $proxy_location {
        # Target API URL (trailing slash is important)
        proxy_pass $TARGET_API_URL;

        # Set necessary proxy headers
        proxy_set_header Host generativelanguage.googleapis.com;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header Accept-Encoding ""; # Prevent Nginx from messing with backend encoding

        # SSL settings for communicating with the HTTPS backend
        proxy_ssl_server_name on; # Required for SNI support (Google APIs need this)
        # proxy_ssl_verify on;    # Recommended to enable backend SSL verification
        # proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt; # Adjust path based on your system

        # Timeout settings (adjust as needed)
        # proxy_connect_timeout 60s;
        # proxy_send_timeout   60s;
        # proxy_read_timeout   60s; # Increase if waiting long for API responses

        # Handle streaming responses (if Gemini API uses them)
        proxy_buffering off;      # Crucial for Server-Sent Events (SSE) or streaming
        proxy_cache off;          # API proxies usually don't benefit from caching
        proxy_http_version 1.1;   # Recommended for backend communication
        proxy_set_header Connection ""; # Clear Connection header for proper keep-alive handling upstream

        # --- API Key Handling ---
        # !! Recommended Method: Client provides API Key !!
        # Nginx forwards client headers (like x-goog-api-key) and URL parameters (?key=...) by default.
        # Client call example (Header):
        # curl -H "x-goog-api-key: YOUR_API_KEY" ... http(s)://$server_name${proxy_location}gemini-pro:generateContent
        # Client call example (URL parameter):
        # curl ... "http(s)://$server_name${proxy_location}gemini-pro:generateContent?key=YOUR_API_KEY"

        # --- Not Recommended: Adding API Key in Nginx (Security Risk) ---
        # If you choose this method and understand the risks, uncomment the line below and replace the key.
        # proxy_set_header x-goog-api-key YOUR_ACTUAL_GEMINI_API_KEY;
        # Note: Ensure the permissions for this Nginx config file are strictly controlled!
    }

    # Optional: Root path handling
    location / {
        # Return a simple forbidden message or 404
        return 403 "Forbidden";
        # Or point to a static welcome page
        # root /var/www/html;
        # index index.html index.htm;
    }

    # Log file paths
    access_log /var/log/nginx/${config_file_name}.access.log;
    error_log /var/log/nginx/${config_file_name}.error.log;
}
EOF
)

# 4. Write configuration file
print_info "Writing configuration to: $config_file_path"
echo "$nginx_config" > "$config_file_path"
if [[ $? -ne 0 ]]; then
    print_error "Failed to write configuration file! Check permissions or disk space."
    exit 1
fi
print_info "Configuration file created successfully."
echo

# 5. Enable configuration (create symbolic link)
print_info "Enabling configuration (creating symbolic link)..."
# Use -f to force overwrite any existing link
ln -sf "$config_file_path" "$link_path"
if [[ $? -ne 0 ]]; then
    print_error "Failed to create symbolic link!"
    exit 1
fi
print_info "Configuration enabled: $link_path -> $config_file_path"
echo

# 6. Completion and Next Steps
print_info "--------------------------------------------------"
print_info "Configuration Complete!"
print_info "--------------------------------------------------"
echo -e "${YELLOW}Next Steps:${NC}"
echo -e "1. ${GREEN}Test Nginx configuration syntax:${NC}"
echo -e "   sudo nginx -t"
echo
echo -e "2. ${GREEN}If the test is successful (shows 'syntax is ok' and 'test is successful'), reload the Nginx service:${NC}"
echo -e "   sudo systemctl reload nginx"
echo
echo -e "3. ${GREEN}Using your reverse proxy:${NC}"
echo -e "   You can now access the Gemini API via the following URL (replace 'gemini-pro:generateContent' with the actual model/method):"
if [[ "$use_https" == "y" ]]; then
    echo -e "   ${YELLOW}POST https://$server_name${proxy_location}gemini-pro:generateContent${NC}"
else
    echo -e "   ${YELLOW}POST http://$server_name${proxy_location}gemini-pro:generateContent${NC}"
fi
echo -e "   ${YELLOW}Important:${NC} Make sure to include your Google API Key in your client requests, either via the HTTP Header ('x-goog-api-key: YOUR_API_KEY') or URL parameter ('?key=YOUR_API_KEY')."
echo
print_warning "Please double-check your firewall settings to ensure port 80 (HTTP) and/or 443 (HTTPS) are open externally if needed."
print_info "Script execution finished."

exit 0